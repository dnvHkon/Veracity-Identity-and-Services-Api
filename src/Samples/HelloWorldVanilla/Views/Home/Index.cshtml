@using System.Configuration
@model Veracity.Services.Api.Models.UserInfo
@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>@Model.Id</h1>
    <p class="lead">User information collected from myDNVGL api V3 using the SDK</p>
    <p><a href="@ConfigurationManager.AppSettings["myApiV3Url"]" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Name:</h2>
        <p>
            @Model.Name
        </p>
        <p><span class="btn btn-default">@Model.ServicesUrl</span></p>
    </div>
    <div class="col-md-4">
        <h2>Email</h2>
        <p>@Model.Email</p>
    </div>
    @if (User.Identity.IsAuthenticated)
    {
        <div class="col-md-4">
            <h2>Proxy service:</h2>
            <p><a href="/my/profile">My Profile Proxy Service</a></p>
        </div>
    }
    <div class="col-lg-12">
        <h2>Usage</h2>
        <p>
            Global.asax:
            <pre>
        protected void Application_Start()
        {
            ConfigurationManagerHelper.SetManager(new ConfigManager());
            this.AddDependencyInjection&#x3C;AppServiceConfig&#x3E;(); //Uses Microsoft.Extensions.DependencyInjection as the IoC container and configures the veracity sdk bindings
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }

        protected void Application_Error(object sender, EventArgs e)
        {
            var lastError = Server.GetLastError();
            var exception = lastError as ServerException;
            if (exception != null && exception.Status == HttpStatusCode.Unauthorized)
                HttpContext.Current.Response.Redirect("/");
        }
</pre>
            
            Startup.cs:
			<pre>
public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
           var azureServiceTokenProvider = new AzureServiceTokenProvider();//Use key vault or other secure storage for secrets
	        var keyVaultClient = new KeyVaultClient(async (authority, resource, scope) =>
		        await azureServiceTokenProvider.GetAccessTokenAsync(resource));
	        var secret = keyVaultClient.GetSecretAsync("https://veracitydevdaydemo.vault.azure.net/",
		        "Veracity1--ClientSecret").Result;
	        var subscriptionKey = keyVaultClient
		        .GetSecretAsync("https://veracitydevdaydemo.vault.azure.net/", "Veracity--SubscriptionKey").Result;
			app.UseCookieAuthentication(new CookieAuthenticationOptions { CookieName = "a.c" }); //set auth cookie
            app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType); //set default auth type 
            //configure veracity auth
            app.UseVeracityAuthentication(new TokenProviderConfiguration
	            {
		            ClientSecret = secret.Value,
		            SubscriptionKey = subscriptionKey.Value
	            }) //Add Azure Ad B2C authentication and access token cache
                .UseTokenCache(CacheFactoryFunc); //add access token cache and set cache strategy
        }

        private static DistributedTokenCache CacheFactoryFunc()
        {
            return new DistributedTokenCache(HttpContext.Current.User as ClaimsPrincipal, DistributedCache, null, null);
        }

        private static MemoryDistributedCache DistributedCache { get; } =
            new MemoryDistributedCache(
                new OptionsWrapper&#x3C;MemoryDistributedCacheOptions&#x3E;(new MemoryDistributedCacheOptions()));
    }

   
</pre>
            
            add a new class AppServiceConfig.cs
            <pre>
 public class AppServiceConfig : ServicesConfig
    {
        public override bool IncludeProxies => true;

        protected override IServiceCollection Configure(IServiceCollection services)
        {
            //add your own service bindings (just as in asp.net core)
            return base.Configure(services);
        }
    }
</pre>
            Web.Config:
            <pre>
 &#x3C;appSettings&#x3E;
    &#x3C;add key=&#x22;aspnet:UseTaskFriendlySynchronizationContext&#x22; value=&#x22;true&#x22;/&#x3E;
    &#x3C;add key=&#x22;webpages:Version&#x22; value=&#x22;3.0.0.0&#x22;/&#x3E;
    &#x3C;add key=&#x22;webpages:Enabled&#x22; value=&#x22;false&#x22;/&#x3E;
    &#x3C;add key=&#x22;ClientValidationEnabled&#x22; value=&#x22;true&#x22;/&#x3E;
    &#x3C;add key=&#x22;UnobtrusiveJavaScriptEnabled&#x22; value=&#x22;true&#x22;/&#x3E;
    &#x3C;add key=&#x22;apiGW:clientId&#x22; value=&#x22;db4b6456-8873-4358-8c5d-96c39750ec28&#x22;/&#x3E;
    &#x3C;add key=&#x22;apiGW:policy&#x22; value=&#x22;B2C_1A_SignInWithADFSIdp&#x22;/&#x3E;
    &#x3C;!--&#x3C;add key=&#x22;apiGW:scope&#x22; value=&#x22;https://dnvglb2cprod.onmicrosoft.com/aa307cec-db8a-4224-8d5f-e864f16b1ad0/user_impersonation&#x22; /&#x3E;--&#x3E;
    &#x3C;add key=&#x22;apiGW:scope&#x22; value=&#x22;https://dnvglb2cprod.onmicrosoft.com/83054ebf-1d7b-43f5-82ad-b2bde84d7b75/user_impersonation&#x22;/&#x3E;
    &#x3C;add key=&#x22;apiGW:redirectUrl&#x22; value=&#x22;https://localhost:44330/&#x22;/&#x3E;
    &#x3C;add key=&#x22;apiGW:idp&#x22; value=&#x22;a68572e3-63ce-4bc1-acdc-b64943502e9d&#x22;/&#x3E;
    &#x3C;!-- The azure ad b2c id --&#x3E;
    &#x3C;!--&#x3C;add key=&#x22;myApiV3Url&#x22; value=&#x22;https://localhost:44337/&#x22; /&#x3E;--&#x3E;
    &#x3C;add key=&#x22;myApiV3Url&#x22; value=&#x22;https://api-test.veracity.com/platform/&#x22;/&#x3E;
    &#x3C;add key=&#x22;apiGW:clientSecret&#x22; value=&#x22;#}r8ix&#x26;gt;-qWFu98-8&#x22;/&#x3E;
    &#x3C;add key=&#x22;subscriptionKey&#x22; value=&#x22;532981632ce043019fb8aa387e6909c6&#x22;/&#x3E;
  &#x3C;/appSettings&#x3E;
</pre>
        </p>
    </div>
</div>